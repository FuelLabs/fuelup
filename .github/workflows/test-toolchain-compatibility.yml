name: Test toolchain compatibility (Latest)

on:
  workflow_dispatch:
    inputs:
      version-matrix:
        required: true
        type: string
  workflow_call:
    inputs:
      version-matrix:
        required: true
        type: string

env:
  INCOMPATIBLE_DIR: ./incompatible-versions
  LATEST_CHANNEL_DIR: ./channel-fuel-latest.toml.d/

jobs:
  test-toolchain-compatibility:
    name: Test forc-${{ matrix.job.forc-version }} against fuel-core-${{ matrix.job.fuel-core-version }}
    runs-on: ubuntu-latest
    # Init parallelized jobs running tests for toolchain version sets in a matrix.
    # `fail-fast` is set to false so that we run the tests to completion even if a single version set fails.
    # We use the fromJSON expression to have an easier time setting up a matrix with dynamic inputs.
    # See:
    # https://docs.github.com/en/actions/learn-github-actions/expressions#fromjson
    strategy:
      fail-fast: false 
      matrix: ${{ fromJSON(inputs.version-matrix) }}
    services:
      fuel-core:
        image: ghcr.io/fuellabs/fuel-core:v${{ matrix.job.fuel-core-version }}
        ports:
          - 4000:4000

    steps:
      - name: Checkout Sway repo @ v${{ matrix.job.forc-version }}
        uses: actions/checkout@v3
        with:
          repository: fuellabs/sway
          path: . 
          ref: v${{ matrix.job.forc-version }}

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v1

        # In the next 3 steps we run the integration tests found in the Sway CI:
        # https://github.com/FuelLabs/sway/blob/3bd8eaf4a0f11a3009c9421100cc06c2e897b6c2/.github/workflows/ci.yml#L229-L270
      - name: Cargo Run E2E Tests 
        id: e2e-tests
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --locked --release --bin test -- --locked

      - name: Build All Tests
        run: cd test/src/sdk-harness && bash build.sh --locked && cd ../../../

      - name: Cargo Test sway-lib-std
        id: std-lib-tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path ./test/src/sdk-harness/Cargo.toml -- --test-threads=1 --nocapture

      # We use upload artifacts in the remaining steps to collect test results to be used in the subsequent index-versions job.
      #
      # See:
      # https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #
      # On failure, we upload files with the `incompatible` prefix.
      #
      # We have to explicitly check for:
      # 1) e2e-tests.conclusion == 'failure'
      # 2) std-lib-tests.conclusion == 'failure'
      # So that we create failure artifacts only if tests fail and not anywhere before so that we can retry this workflow
      # if it fails for other reasons other than tests.
      - name: Create failure artifact
        if: ${{ failure() && (steps.e2e-tests.conclusion == 'failure' || steps.std-lib-tests.conclusion == 'failure' )}}
        run: touch incompatible-forc-${{ matrix.job.forc-version }}@fuel-core-${{ matrix.job.fuel-core-version }}

      - name: Upload failure artifact
        if: ${{ failure() && (steps.e2e-tests.conclusion == 'failure' || steps.std-lib-tests.conclusion == 'failure' ) }}
        id: upload-failure-artifact
        uses: actions/upload-artifact@v3
        with:
          name: incompatible-forc-${{ matrix.job.forc-version }}@fuel-core-${{ matrix.job.fuel-core-version }}
          path: incompatible-forc-${{ matrix.job.forc-version }}@fuel-core-${{ matrix.job.fuel-core-version }}

      # On success, we upload files with the `compatible` prefix.
      #
      # Success artifacts are created if everything above passed. This marks the 2 versions as compatible.
      - name: Create success artifact
        if: ${{ success() }}
        run: touch compatible-forc-${{ matrix.job.forc-version }}@fuel-core-${{ matrix.job.fuel-core-version }}

      - name: Upload success artifact
        if: ${{ success() }}
        id: upload-success-artifact
        uses: actions/upload-artifact@v3
        with:
          name: compatible-forc-${{ matrix.job.forc-version }}@fuel-core-${{ matrix.job.fuel-core-version }}
          path: compatible-forc-${{ matrix.job.forc-version }}@fuel-core-${{ matrix.job.fuel-core-version }}

  # index-versions: This job will process the artifacts above if testing is not skipped and upload
  # incompatible versions and/or publish a new channel-fuel-latest.toml to gh-pages.
  index-versions:
    name: Index versions compatibilities
    needs: test-toolchain-compatibility
    if: ${{ always() && needs.test-toolchain-compatibility.result != 'skipped' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          path: versions

      # Here, we decide which versions to mark as compatible or incompatible.
      # Compatible: the uploaded artifact starting with the name 'compatible*' and is at the top when sorted.
      # We only care about the latest version set that passed tests here.
      #
      # Incompatible: all the uploaded artifacts that has 'incompatible' in file names, followed by their versions.
      # Here we care about all versions tagged as incompatible, and they're uploaded inside the incompatible-versions
      # directory within the `gh-pages` branch.
      - name: Prepare compatible and incompatible versions
        id: prep-versions
        working-directory: versions
        run: |
            COMPATIBLE_VERSIONS=$(ls -1 | grep "compatible*" | sort -rV | head -n 1)
            echo "LATEST_COMPATIBLE_FORC=$(echo $COMPATIBLE_VERSIONS | cut -d '@' -f1 | cut -d '-' -f3-)" >> $GITHUB_ENV
            echo "LATEST_COMPATIBLE_FUEL_CORE=$(echo $COMPATIBLE_VERSIONS | cut -d '@' -f2 | cut -d '-' -f3)" >> $GITHUB_ENV

            INCOMPATIBLE_VERSIONS=$(ls | grep 'incompatible' | cut -d '-' -f2-)
            mkdir -p ${{ env.INCOMPATIBLE_DIR }}
            for version in $INCOMPATIBLE_VERSIONS; do
              touch ${{ env.INCOMPATIBLE_DIR }}/$version
            done

      # Run index-versions.sh here which generates the channel TOML file with download links and hashes for forc and fuel-core.
      - name: Prepare channel with compatible versions
        if: ${{ env.LATEST_COMPATIBLE_FORC && env.LATEST_COMPATIBLE_FUEL_CORE }}
        run: |
            touch channel-fuel-latest.toml
            mkdir -p ${{ env.LATEST_CHANNEL_DIR }}
            ./.github/workflows/scripts/index-versions.sh ${{ env.LATEST_COMPATIBLE_FORC }} ${{ env.LATEST_COMPATIBLE_FUEL_CORE }}
            cp channel-fuel-latest.toml ${{ env.LATEST_CHANNEL_DIR }}

      - name: Deploy latest channel
        if: ${{ env.LATEST_COMPATIBLE_FORC && env.LATEST_COMPATIBLE_FUEL_CORE }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ env.LATEST_CHANNEL_DIR }}
          keep_files: true
          destination_dir: ./

      - name: Deploy incompatible versions
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: versions/incompatible-versions
          keep_files: true
          destination_dir: ${{ env.INCOMPATIBLE_DIR }}
